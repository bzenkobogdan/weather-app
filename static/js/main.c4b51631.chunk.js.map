{"version":3,"sources":["components/background.tsx","data-layer/search/selectors.ts","data-layer/user/selectors.ts","containers/app/App.tsx","data-layer/search/actions.ts","data-layer/search/constants.ts","data-layer/user/actions.ts","data-layer/user/constants.ts","serviceWorker.ts","data-layer/user/reducer.ts","data-layer/reducers.ts","data-layer/search/reducer.ts","data-layer/configureStore.ts","data-layer/search/saga.ts","data-layer/user/saga.ts","data-layer/sagas.ts","index.tsx"],"names":["Background","props","className","style","background","temp","children","getCountry","state","_","isEmpty","search","title","getCity","parent","getCoords","latt_long","getResults","consolidated_weather","getTemp","the_temp","getLocation","user","location","parse","num","toFixed","getImageLink","name","connect","country","searchSelectors","city","coords","results","userSelectors","searchAction","value","dispatch","type","data","searchLocationAction","searchDetailsAction","useState","searchValue","updateSearch","prevTemp","setPrevTemp","userLocation","latitude","longitude","useEffect","cb","navigator","geolocation","getCurrentPosition","show","onHide","Header","Title","Body","map","onClick","e","id","preventDefault","searchByLocation","woeid","block","key","animation","Footer","inline","placeholder","onChange","target","length","variant","Item","result","xl","lg","src","weather_state_abbr","rounded","weather_state_name","min_temp","max_temp","wind_speed","air_pressure","Boolean","window","hostname","match","initialState","rootReducer","combineReducers","action","sagaMiddleware","createSagaMiddleware","middleware","applyMiddleware","thunkMiddleware","searchDetails","apiSearchDetails","a","http","get","call","put","message","apiSearchByQuery","res","takeLatest","apiSearchByCoords","rootSaga","all","preloadedState","store","createStore","composeWithDevTools","run","sagas","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.c4b51631.chunk.js","sourcesContent":["import React, { ReactNode } from 'react';\n\ninterface BackgroundProps {\n  temp: number,\n  children: ReactNode\n}\n\nconst getBackground = (temp: number) => {\n  if (temp >= 30) {\n    return '#ff8c00';\n  }\n\n  if (temp <= -10) {\n    return '#00ffff';\n  }\n\n  return '#fff700';\n};\n\nfunction Background(props: BackgroundProps) {\n  return (\n    <div className=\"background\" style={{ background: getBackground(props.temp) }}>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Background;\n","import _ from 'lodash';\n\nexport const getCountry = (state: any) => (!_.isEmpty(state.search)\n    && state.search.title) || '';\nexport const getCity = (state: any) => (!_.isEmpty(state.search)\n    && state.search.parent.title) || '';\nexport const getCoords = (state: any) => (!_.isEmpty(state.search)\n    && state.search.latt_long) || '';\nexport const getResults = (state: any) => (!_.isEmpty(state.search)\n    && state.search.consolidated_weather) || [];\nexport const getTemp = (state: any) => (!_.isEmpty(state.search)\n    && state.search.consolidated_weather[0].the_temp) || 0;\n","import _ from 'lodash';\n\nexport const getLocation = (state: any) => (!_.isEmpty(state.user) && state.user.location) || [];\n","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport * as RB from 'react-bootstrap';\nimport './App.scss';\n\nimport Background from 'components/background';\n\nimport * as searchSelectors from 'data-layer/search/selectors';\nimport * as userSelectors from 'data-layer/user/selectors';\nimport { search as searchAction, searchDetails as searchDetailsAction } from 'data-layer/search/actions';\nimport { location as searchLocationAction } from 'data-layer/user/actions';\n\nconst parse = (num: number): string => num.toFixed();\nconst getImageLink = (name: string): string => `https://www.metaweather.com/static/img/weather/${name}.svg`;\n\nfunction getLocation(cb: PositionCallback) {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(cb);\n  }\n}\n\ninterface ICoordinates {\n  latitude: number;\n  longitude: number;\n}\n\nexport function App(props: Props) {\n  const [searchValue, updateSearch] = useState('');\n  // const [temp, updateTemp] = useState(0);\n  const [prevTemp, setPrevTemp] = useState(0);\n\n  if (props.temp !== prevTemp) {\n    setPrevTemp(props.temp);\n  }\n\n  const search = (e: React.MouseEvent) => {\n    e.preventDefault();\n    if (searchValue.length >= 3) {\n      props.searchAction({ value: searchValue });\n    }\n  };\n\n  const searchByLocation = (e: React.MouseEvent, id: number) => {\n    e.preventDefault();\n    props.searchDetailsAction({ value: id });\n  };\n\n  const userLocation = ({ coords }: { coords: ICoordinates }) => {\n    props.searchLocationAction({ value: `${coords.latitude},${coords.longitude}` });\n  };\n\n  useEffect(() => {\n    getLocation(userLocation);\n  }, []);\n\n  return (\n    <Background temp={props.temp}>\n      <RB.Modal show={_.isEmpty(props.results)} onHide={() => { }}>\n        <RB.Modal.Header>\n          <RB.Modal.Title>Choose your City!</RB.Modal.Title>\n        </RB.Modal.Header>\n        <RB.Modal.Body>\n          {(!_.isEmpty(props.location)\n            && props.location.map((location: any) => (\n              <RB.Button\n                onClick={(e: React.MouseEvent) => searchByLocation(e, location.woeid)}\n                block\n                key={location.woeid}\n              >\n                {location.title}\n              </RB.Button>\n            ))) || <RB.Spinner animation=\"border\" />}\n        </RB.Modal.Body>\n        <RB.Modal.Footer />\n      </RB.Modal>\n      <RB.Container className=\"app\">\n        <RB.Row>\n          <RB.Col>\n            <RB.Form inline className=\"search justify-content-md-center\">\n              <RB.FormControl\n                type=\"text\"\n                placeholder=\"Search\"\n                value={searchValue}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateSearch(e.target.value)}\n              />\n              <RB.Button onClick={search} type=\"submit\" variant=\"outline-success\">\n                Search\n              </RB.Button>\n            </RB.Form>\n          </RB.Col>\n        </RB.Row>\n        {!_.isEmpty(props.results)\n          && (\n            <RB.Row>\n              <RB.Col>\n                <RB.ListGroup variant=\"flush\">\n                  <RB.ListGroup.Item className=\"results\">\n                    <RB.Container>\n                      {props.results.map((result: any) => (\n                        <RB.Row className=\"results__item\" key={result.id}>\n                          <RB.Col xl={1} lg={1}>\n                            <RB.Image src={getImageLink(result.weather_state_abbr)} rounded />\n                          </RB.Col>\n                          <RB.Col>\n                            <RB.Container>\n                              <RB.Row>\n                                <RB.Col>\n                                  {props.city}\n                                  /\n                                  {props.country}\n                                  {' '}\n                                  {result.weather_state_name}\n                                </RB.Col>\n                              </RB.Row>\n                              <RB.Row>\n                                <RB.Col>\n                                  <RB.Badge variant=\"dark\">\n                                    {parse(result.the_temp)}\n                                    {' '}\n                                    °С\n                                  </RB.Badge>\n                                  {' '}\n                                  temperature from\n                                  {parse(result.min_temp)}\n                                  {' '}\n                                  to\n                                  {parse(result.max_temp)}\n                                  {' '}\n                                  {parse(result.wind_speed)}\n                                  {' '}\n                                  m/s. clouds 100 %,\n                                  {' '}\n                                  {parse(result.air_pressure)}\n                                  {' '}\n                                  hpa\n                                </RB.Col>\n                              </RB.Row>\n                              <RB.Row>\n                                <RB.Col>\n                                  Geo coords\n                                  {props.coords}\n                                </RB.Col>\n                              </RB.Row>\n                            </RB.Container>\n                          </RB.Col>\n                        </RB.Row>\n                      ))}\n                    </RB.Container>\n                  </RB.ListGroup.Item>\n                </RB.ListGroup>\n              </RB.Col>\n            </RB.Row>\n          )}\n        {!_.isEmpty(props.results)\n          && (\n            <RB.Row className=\"justify-content-md-center\">\n              <RB.Image className=\"main-icon\" src={getImageLink(props.results[0].weather_state_abbr)} />\n            </RB.Row>\n          )}\n        {/* <RB.Row>\n          <RB.Col>\n            <RB.Form className=\"range\">\n              <RB.Form.Group controlId=\"formBasicRangeCustom\">\n                <RB.Form.Label>Range</RB.Form.Label>\n                <RB.Form.Control min=\"-40\" max=\"60\" type=\"range\"\n                  custom value={temp} onChange={(e: any) => updateTemp(e)} />\n              </RB.Form.Group>\n            </RB.Form>\n          </RB.Col>\n        </RB.Row> */}\n      </RB.Container>\n    </Background>\n  );\n}\n\ninterface Props {\n  country: string,\n  city: string,\n  coords: string,\n  results: any,\n  location: any,\n  temp: number,\n  searchAction: Function,\n  searchLocationAction: Function,\n  searchDetailsAction: Function\n}\n\nexport default connect((state: Props) => ({\n  country: searchSelectors.getCountry(state),\n  city: searchSelectors.getCity(state),\n  coords: searchSelectors.getCoords(state),\n  results: searchSelectors.getResults(state),\n  temp: searchSelectors.getTemp(state),\n  location: userSelectors.getLocation(state),\n}), { searchAction, searchLocationAction, searchDetailsAction })(App);\n","import * as ActionTypes from 'data-layer/search/constants';\n\nexport const search = ({ value }: { value: string }) => (dispatch: Function) => dispatch({\n  type: ActionTypes.SEARCH_REQUEST,\n  data: { value },\n});\n\nexport const searchDetails = ({ value }: { value: string }) => (dispatch: Function) => dispatch({\n  type: ActionTypes.SEARCH_DETAILS_REQUEST,\n  data: { value },\n});\n","export const SEARCH_REQUEST = 'SEARCH_REQUEST';\nexport const SEARCH_SUCCESS = 'SEARCH_SUCCESS';\nexport const SEARCH_FAILURE = 'SEARCH_FAILURE';\n\nexport const SEARCH_DETAILS_REQUEST = 'SEARCH_DETAILS_REQUEST';\nexport const SEARCH_DETAILS_SUCCESS = 'SEARCH_DETAILS_SUCCESS';\nexport const SEARCH_DETAILS_FAILURE = 'SEARCH_DETAILS_FAILURE';\n","import * as ActionTypes from 'data-layer/user/constants';\n\nexport const location = ({ value }: { value: string }) => (dispatch: Function) => dispatch({\n  type: ActionTypes.USER_LOCATION_REQUEST,\n  data: { value },\n});\n","export const USER_LOCATION_REQUEST = 'USER_LOCATION_REQUEST';\nexport const USER_LOCATION_SUCCESS = 'USER_LOCATION_SUCCESS';\nexport const USER_LOCATION_FAILURE = 'USER_LOCATION_FAILURE';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n  // [::1] is the IPv6 localhost address.\n  || window.location.hostname === '[::1]'\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  || window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n  ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator && process.env.PUBLIC_URL) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n            + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as ActionTypes from 'data-layer/user/constants';\n\ninterface UserInitialState {\n  location: any\n}\n\nconst initialState = {\n  location: [],\n};\n\nexport default function reducer(state: UserInitialState = initialState, action: any) {\n  const { type, data } = action;\n\n  switch (type) {\n    case ActionTypes.USER_LOCATION_SUCCESS:\n      return {\n        ...state,\n        location: data,\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport search from 'data-layer/search/reducer';\nimport user from 'data-layer/user/reducer';\n\nconst rootReducer = combineReducers({\n  search,\n  user,\n});\n\nexport default rootReducer;\n","import * as ActionTypes from 'data-layer/search/constants';\n\n\nexport default function reducer(state: any = {}, action: any) {\n  const { type, data } = action;\n\n  switch (type) {\n    case ActionTypes.SEARCH_DETAILS_SUCCESS:\n      return data;\n    default:\n      return state;\n  }\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from './reducers';\n\nexport const sagaMiddleware = createSagaMiddleware();\nconst middleware = applyMiddleware(thunkMiddleware, sagaMiddleware);\nexport default function configureStore(preloadedState: any) {\n  return createStore(\n    rootReducer,\n    preloadedState,\n    composeWithDevTools(middleware),\n  );\n}\n","import http from 'axios';\nimport { takeLatest, call, put } from 'redux-saga/effects';\nimport * as ActionTypes from 'data-layer/search/constants';\n\nconst apiSearchDetails = async ({ value }: { value: string }) => await http.get(`https://www.metaweather.com/api/location/${value}/`);\nfunction* searchDetails(action: any) {\n  try {\n    const { data } = yield call(apiSearchDetails, action.data);\n    yield put({ type: ActionTypes.SEARCH_DETAILS_SUCCESS, data });\n  } catch (err) {\n    yield put({ type: ActionTypes.SEARCH_DETAILS_FAILURE, data: err.message });\n  }\n}\n\nconst apiSearchByQuery = async ({ value }: { value: string }) => await http.get(`https://www.metaweather.com/api/location/search/?query=${value}`);\nfunction* search(action: any) {\n  try {\n    const res = yield call(apiSearchByQuery, action.data);\n    yield call(searchDetails, { data: { value: res.data[0].woeid } });\n  } catch (err) {\n    // yield put({ type: ActionTypes.SEARCH_FAILURE, data: err.message });\n  }\n}\n\nexport default [\n  takeLatest(ActionTypes.SEARCH_REQUEST, search),\n  takeLatest(ActionTypes.SEARCH_DETAILS_REQUEST, searchDetails),\n];\n","import http from 'axios';\nimport { takeLatest, call, put } from 'redux-saga/effects';\nimport * as ActionTypes from 'data-layer/user/constants';\n\nconst apiSearchByCoords = async ({ value }: { value: string }) => await http.get(`https://www.metaweather.com/api/location/search/?lattlong=${value}`);\nfunction* location(action: any) {\n  try {\n    const res = yield call(apiSearchByCoords, action.data);\n    yield put({ type: ActionTypes.USER_LOCATION_SUCCESS, data: res.data });\n  } catch (err) {\n    // yield put({ type: ActionTypes.SEARCH_FAILURE, data: err.message });\n  }\n}\n\nexport default [\n  takeLatest(ActionTypes.USER_LOCATION_REQUEST, location),\n];\n","import { all } from 'redux-saga/effects';\nimport search from 'data-layer/search/saga';\nimport user from 'data-layer/user/saga';\n\nexport default function* rootSaga() {\n  yield all([\n    ...search,\n    ...user,\n  ]);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from 'containers/app/App';\nimport * as serviceWorker from 'serviceWorker';\nimport configureStore, { sagaMiddleware } from 'data-layer/configureStore';\nimport sagas from 'data-layer/sagas';\n\nconst store = configureStore({});\n\nsagaMiddleware.run(sagas);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}